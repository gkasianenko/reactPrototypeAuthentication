{"version":3,"sources":["components/Profile/ProfileForm.module.css","components/Layout/MainNavigation.module.css","components/Profile/UserProfile.module.css","components/StartingPage/StartingPageContent.module.css","store/auth-context.js","store/retrieve-token.js","components/Layout/MainNavigation.js","components/Layout/Layout.js","components/Profile/ProfileForm.js","components/Profile/UserProfile.js","components/Auth/AuthForm.js","pages/AuthPage.js","components/StartingPage/StartingPageContent.js","pages/HomePage.js","App.js","index.js","components/Auth/AuthForm.module.css"],"names":["module","exports","logoutTimer","retrieveStoredToken","storedToken","localStorage","getItem","expirationTime","remainingTime","calculateRemainingTime","removeItem","token","AuthContext","React","createContext","isLoggedIn","login","logout","currentTime","Date","getTime","AuthContextProvider","props","initialToken","tokenData","useState","setToken","logoutHandler","clearTimeout","contextValue","setItem","setTimeout","Provider","value","children","MainNavigation","history","useHistory","authContext","useContext","className","classes","header","to","logo","onClick","replace","Layout","ProfileForm","newPasswordInputRef","useRef","form","onSubmit","event","preventDefault","enteredNewPassword","current","fetch","method","body","JSON","stringify","idToken","password","returnSecureToken","headers","then","res","control","htmlFor","type","id","minLength","ref","action","UserProfile","profile","AuthForm","emailInputRef","passwordInputRef","isLogin","setIsLogin","isLoading","setIsLoading","auth","url","enteredEmail","enteredPassword","email","ok","json","data","Error","expiresIn","toISOString","catch","error","alert","message","required","actions","toggle","prevState","AuthPage","StartingPageContent","starting","HomePage","App","path","exact","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.5ec33b1b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ProfileForm_form__25aVk\",\"control\":\"ProfileForm_control__15Hqv\",\"action\":\"ProfileForm_action__NO9AL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MainNavigation_header__2XIsS\",\"logo\":\"MainNavigation_logo__1iqCl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"UserProfile_profile__1b0yv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"starting\":\"StartingPageContent_starting__1lU36\"};","import React, { useState } from \"react\";\r\nimport retrieveStoredToken from \"./retrieve-token\";\r\n\r\n//Это глобальная переменная, которая покажет, запущен ли таймер протухания токена аутентификации. По логике приложения, если человек логинится, запускается таймер. Через это время человек разлогинится сам. Но если человек самостоятельно выходит из аккаунта, таймер должен остановиться и токен должен протухнуть.\r\nlet logoutTimer;\r\n\r\n//инициализируем контекст для токена аутентификации. Здесь отслеживается наличие токена и какой он, залогинен ли пользователь и функции для логина и выхода из аккаунта\r\nconst AuthContext = React.createContext({\r\n  token: \"\",\r\n  isLoggedIn: false,\r\n  login: (token) => {},\r\n  logout: () => {},\r\n});\r\n\r\n//Здесь функция рассчитывает, сколько времени осталось до протухания токена аутентификации. Сначала получаем актуальную дату, потом разницу\r\nexport const calculateRemainingTime = (expirationTime) => {\r\n  //текущий слепок времени\r\n  const currentTime = new Date().getTime();\r\n  //слепок времени в будущем\r\n  const adjExpirationTime = new Date(expirationTime).getTime();\r\n\r\n  const remainingDuration = adjExpirationTime - currentTime;\r\n\r\n  return remainingDuration;\r\n};\r\n\r\nexport const AuthContextProvider = (props) => {\r\n  //Тут используется функция, которая собирает из сторедж данные по наличию токена и времени его действия. Для пользования localstorage api можно не использовать useEffect, поскольку localstorage - синхронный api. Поэтому при инициализации компонента реакт просто один раз возьмет данные и больше не будет перезаписывать initialToken\r\n  const tokenData = retrieveStoredToken();\r\n  let initialToken;\r\n\r\n  //если из локалстореджа подтянулись данные, то помещаем токен из локалстореджа в переменную\r\n  if (tokenData) {\r\n    initialToken = tokenData.token;\r\n  }\r\n  const [token, setToken] = useState(initialToken);\r\n\r\n  //проверяем наличие токена(первращаем в булевое значение переменную)\r\n  const userIsLoggedIn = !!token;\r\n\r\n  const logoutHandler = () => {\r\n    setToken(null);\r\n    localStorage.removeItem(\"token\");\r\n\r\n    //Здесь описана логика сбрасывания таймера токена. Если logoutTimer не undefined, значит человек залогинился из апустил таймер. Поэтому он тут определится и остановится\r\n    if (logoutTimer) {\r\n      clearTimeout(logoutTimer);\r\n    }\r\n  };\r\n\r\n  const loginHandler = (token, expirationTime) => {\r\n    //Здесь мы полученный токен передаем в стейт, который передается в контекст аутентификации. После этого мы сохраняем токен в веб-память, чтобы человека не выкидывало из аккаунта каждый раз после перезагрузки страницы, и токен был всегда в пользовании реактом. Еще в сторедж добавляем время использования токена, чтобы при логине человеку не подкидывался протухший токен, после окончания этого времени\r\n    setToken(token);\r\n    localStorage.setItem(\"token\", token);\r\n    localStorage.setItem(\"expirationTime\", expirationTime);\r\n\r\n    const remainingTime = calculateRemainingTime(expirationTime);\r\n\r\n    //Выше написана функция, которая считает remainingTime, здесь при срабатывании функции логина поставится счетчик setTimeout, который по истечении посчитанного времени автоматически сделает logout юзера\r\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\r\n  };\r\n\r\n  const contextValue = {\r\n    token: token,\r\n    isLoggedIn: userIsLoggedIn,\r\n    login: loginHandler,\r\n    logout: logoutHandler,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n","import { calculateRemainingTime } from \"./auth-context\";\r\n\r\nconst retrieveStoredToken = () => {\r\n    //В логике аутентификации мы прописали при логине помещение в сторедж токена и время его протухания. Здесь мы эти данные собираем \r\n    const storedToken = localStorage.getItem(\"token\");\r\n    const expirationTime = localStorage.getItem(\"expirationTime\");\r\n\r\n    const remainingTime = calculateRemainingTime(expirationTime)\r\n\r\n    //если результат подсчета оставшегося времени будет ниже 1 минуты в милисек, мы не возвращаем токен и очищаем сторедж\r\n    if(remainingTime <= 60000){\r\n        localStorage.removeItem(\"token\");\r\n        localStorage.removeItem(\"expirationTime\");\r\n        return null;\r\n    }\r\n\r\n    //если оставшееся время больше 1 мин, возвращаем токен и оставшееся время\r\n    return {\r\n        token: storedToken,\r\n        remainingTime\r\n    };\r\n}\r\n\r\nexport default retrieveStoredToken;","import { Link } from \"react-router-dom\";\nimport { useContext } from \"react\";\nimport classes from \"./MainNavigation.module.css\";\nimport AuthContext from \"../../store/auth-context\";\nimport { useHistory } from \"react-router-dom\";\n\nconst MainNavigation = () => {\n  const history = useHistory();\n  const authContext = useContext(AuthContext);\n\n  const isLoggedIn = authContext.isLoggedIn;\n\n  const logoutHandler = () => {\n    authContext.logout();\n\n    //перенаправляем юзера\n    history.replace(\"/\");\n  };\n\n  return (\n    <header className={classes.header}>\n      <Link to=\"/\">\n        <div className={classes.logo}>React Auth</div>\n      </Link>\n      <nav>\n        <ul>\n          {!isLoggedIn && (\n            <li>\n              <Link to=\"/auth\">Login</Link>\n            </li>\n          )}\n          {isLoggedIn && (\n            <li>\n              <Link to=\"/profile\">Profile</Link>\n            </li>\n          )}\n          {isLoggedIn && (\n            <li>\n              <button onClick={logoutHandler}>Logout</button>\n            </li>\n          )}\n        </ul>\n      </nav>\n    </header>\n  );\n};\n\nexport default MainNavigation;\n","import { Fragment } from 'react';\n\nimport MainNavigation from './MainNavigation';\n\nconst Layout = (props) => {\n  return (\n    <Fragment>\n      <MainNavigation />\n      <main>{props.children}</main>\n    </Fragment>\n  );\n};\n\nexport default Layout;\n","import { useRef, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport classes from \"./ProfileForm.module.css\";\nimport AuthContext from \"../../store/auth-context\";\n\nconst ProfileForm = () => {\n  const history = useHistory();\n  const newPasswordInputRef = useRef();\n  const authContext = useContext(AuthContext);\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    const enteredNewPassword = newPasswordInputRef.current.value;\n\n    //валидация...\n\n    //Отправка запроса на смену пароля. Здесь мы не отслеживаем ошибку минимального кол-ва символов для пароля, а просто в коде фиксируем мин. кол-во символов для инпута через minLength\n\n    fetch(\n      \"https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyAlIpKhm-P4zaAxjC5d_ybXrJav6E4PAF8\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          idToken: authContext.token,\n          password: enteredNewPassword,\n          returnSecureToken: false,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    ).then((res) => {\n      //типа всегда успешно\n      \n      history.replace(\"/\");\n    });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitHandler}>\n      <div className={classes.control}>\n        <label htmlFor=\"new-password\">New Password</label>\n        <input\n          type=\"password\"\n          id=\"new-password\"\n          minLength=\"7\"\n          ref={newPasswordInputRef}\n        />\n      </div>\n      <div className={classes.action}>\n        <button>Change Password</button>\n      </div>\n    </form>\n  );\n};\n\nexport default ProfileForm;\n","import ProfileForm from './ProfileForm';\nimport classes from './UserProfile.module.css';\n\nconst UserProfile = () => {\n  return (\n    <section className={classes.profile}>\n      <h1>Your User Profile</h1>\n      <ProfileForm />\n    </section>\n  );\n};\n\nexport default UserProfile;\n","import { useState, useRef, useContext } from \"react\";\nimport AuthContext from \"../../store/auth-context\";\nimport { useHistory } from \"react-router-dom\";\n\nimport classes from \"./AuthForm.module.css\";\n\nconst AuthForm = () => {\n  const history = useHistory();\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  const authContext = useContext(AuthContext);\n\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n\n    setIsLoading(true);\n\n    let url;\n\n    if (isLogin) {\n      url =\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAlIpKhm-P4zaAxjC5d_ybXrJav6E4PAF8\";\n    } else {\n      url =\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAlIpKhm-P4zaAxjC5d_ybXrJav6E4PAF8\";\n    }\n\n    //Здесь промис будет работать в два этапа. Сначала мы делаем запрос и получаем ответ. Потом с результатом этого ответа через then мы ловим ошибку, если ее нет - возвращаем промис с результатом. А затем от результата делаем еще один then.catch, если успешен - продолжаем работу с данными. Если ошибка, выводим алерт с ошибкой на экран\n\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword,\n        returnSecureToken: true,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        setIsLoading(false);\n\n        if (res.ok) {\n          //По этому запросу firebase возвращает объект, в котором есть token, который мы будем использовать дальше\n          return res.json();\n        } else {\n          return res.json().then((data) => {\n            //error modal...\n\n            let errorMessage = \"Ошибка авторизации\";\n            // if (data && data.error && data.error.message) {\n            //   errorMessage = data.error.message;\n            // }\n\n            throw new Error(errorMessage);\n\n            //Ниже через then.catch мы ловим ошибку, которую пробрасываем сейчас, и выводим в алерт\n          });\n        }\n      })\n      .then((data) => {\n        //Здесь считается время существования токена аутентификации в милисекундах. Считается точка времени в будущем. Берется текущее время в милисекундах, к нему прибавляется полученное в fetch запросе время в секундах (которое мы тут же перевели в милисекунды умножив на тысячу, и из строки сделали цифрой, поставив плюс перед значением). Полученная сумма милисекунд будет отображать, через сколько стухнет токен\n        const expirationTime = new Date(\n          new Date().getTime() + (+data.expiresIn * 1000)\n        );\n        //Тут переводим второй аргумент - время в милисекундах - в строку даты формата ISO. Потому что объект Date принимает строки ISO\n\n       \n        authContext.login(data.idToken, expirationTime.toISOString());\n        history.replace(\"/\");\n      })\n      .catch((error) => {\n        alert(error.message);\n      });\n  };\n\n  return (\n    <section className={classes.auth}>\n      <h1>{isLogin ? \"Login\" : \"Sign Up\"}</h1>\n      <form onSubmit={submitHandler}>\n        <div className={classes.control}>\n          <label htmlFor=\"email\">Your Email</label>\n          <input type=\"email\" id=\"email\" ref={emailInputRef} required />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"password\">Your Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            ref={passwordInputRef}\n            required\n          />\n        </div>\n        <div className={classes.actions}>\n          {!isLoading && (\n            <button>{isLogin ? \"Login\" : \"Create Account\"}</button>\n          )}\n          {isLoading && <p>Отправка запроса..</p>}\n          <button\n            type=\"button\"\n            className={classes.toggle}\n            onClick={switchAuthModeHandler}\n          >\n            {isLogin ? \"Create new account\" : \"Login with existing account\"}\n          </button>\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default AuthForm;\n","import AuthForm from '../components/Auth/AuthForm';\n\nconst AuthPage = () => {\n  return <AuthForm />;\n};\n\nexport default AuthPage;\n","import classes from './StartingPageContent.module.css';\n\nconst StartingPageContent = () => {\n  return (\n    <section className={classes.starting}>\n      <h1>Welcome on Board!</h1>\n    </section>\n  );\n};\n\nexport default StartingPageContent;\n","import StartingPageContent from '../components/StartingPage/StartingPageContent';\n\nconst HomePage = () => {\n  return <StartingPageContent />;\n};\n\nexport default HomePage;\n","import { Switch, Route, Redirect } from \"react-router-dom\";\nimport { useContext } from \"react\";\nimport Layout from \"./components/Layout/Layout\";\nimport UserProfile from \"./components/Profile/UserProfile\";\nimport AuthPage from \"./pages/AuthPage\";\nimport HomePage from \"./pages/HomePage\";\nimport AuthContext from \"./store/auth-context\";\n\nfunction App() {\n  const authContext = useContext(AuthContext);\n\n  //Здесь динамически добавляется в рутинг страница аутентификации и профиля, в зависимости от того, залогинен ли пользователь. Статус логина отражается в контексте аутентификации, который сделан для всего приложения.\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" exact>\n          <HomePage />\n        </Route>\n        {!authContext.isLoggedIn && (\n          <Route path=\"/auth\">\n            <AuthPage />\n          </Route>\n        )}\n        <Route path=\"/profile\">\n          {authContext.isLoggedIn && <UserProfile />}\n          {!authContext.isLoggedIn && <Redirect to=\"/\" />}\n        </Route>\n        <Route path=\"*\">\n          <Redirect to=\"/\" />\n        </Route>\n      </Switch>\n    </Layout>\n  );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom/client\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport {AuthContextProvider} from \"./store/auth-context\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <AuthContextProvider>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </AuthContextProvider>\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"AuthForm_auth__3d9oj\",\"control\":\"AuthForm_control__23ySk\",\"actions\":\"AuthForm_actions__XtjN5\",\"toggle\":\"AuthForm_toggle__1c7ud\"};"],"sourceRoot":""}